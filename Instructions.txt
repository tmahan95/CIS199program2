Your form will need to ask the user to thier completed credit hours completed prior to Spring 2016. This will be used to determine the user's classification as a freshman (<30 hours), sophomore (30+ hours), junior (60+ hours), or senior (90+ hours). The University does offer 1.5 credit hour courses, so the entered credit hours needs to be a floating point value. In addition, your form will need to gather the first letter of the user's last name (from a textbox). The Registrar bases the registration decision on the combination class standing and first letter of the student's last name. You may either use a string with one letter or an individual char to store the letter. Using the char data type is actually easier. See p. 466-469 for the char data types and associated methods. Unlike strings, char variables may be compared directly using <, <=, >, and >= operators. If you want the user to enter their entire last name, the text shows how to easily extract the first letter as a char in example starting at the bottom of p. 466 of the text. Your code should not care whether the user enters their name with a capital first letter or lower case letter. You can assume that the user won't put anything other than a letter as their last name letter, though it is not difficult to test this (see method char.IsLetter on p. 468). Methods ToUpper or ToLower may also prove useful.

When the user submits their class standing and last name letter, your application should display the earliest date and time that the student will be allowed to register. You may use labels, textboxes, or a dialog box (as with method MessageBox.Show) to display the earliest registration date/time.

For this assignment, I want you to write decision logic using Chapter 4 material. We will solve this assignment a second time later, using arrays and loops. Think carefully about how you should structure your decision logic. There are many way to make this decision but some approaches are much easier than others. Think about several alternatives before committing to one. You will probably want to break this problem down into smaller steps and build the application in pieces. For example, designing the layout of the GUI as one step. Adding support for seniors as another step, then adding juniors, etc. Validation of input is also required, so make sure to use TryParse when reading the entered credit hours and make sure the value is non-negative. Display appropriate error messages to the user for any invalid data entered.

Be sure to add appropriate comments in your code, including your name, program number, due date, and course section. Each variable used in your program needs a comment describing its purpose. Put these at the top of file that holds your event handler(s). You may leave the other files including Program.cs unchanged. Do not worry about the GUI variables, as they are auto-generated in the .Designer.cs file.These requirements are expected for every program and are listed in the syllabus. Preconditions and postconditions are not expected yet, as we've not covered them in class.